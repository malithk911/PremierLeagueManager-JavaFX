/*
 * Name : Malith Kulathilake
 * IIT number : 2018412
 * UOW number : w1761910
 *
 * I confirm that I understand what plagiarism /
    collusion / contract cheating is and have read and
    understood the section on Assessment Offences in the
    Essential Information for Students. The work that I
    have submitted is entirely my own. Any work from
    other authors is duly referenced and acknowledged.
 */

package level5.cw.implementation;

// imports
import java.io.*;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Random;

// premiere league manager class that implements LeagueManager interface
public class PremiereLeagueManager implements LeagueManager, Serializable {
    protected int leagueYear; // league start date

    // default constructor
    public PremiereLeagueManager() {

    }

    /**
     * @param leagueYear league start date
     */
    public PremiereLeagueManager(int leagueYear) {
        this.leagueYear = leagueYear;
    }

    /**
     * Method to add a football club to league
     * @param sportsClub FootballClub object
     */
    @Override
    public void add(SportsClub sportsClub) {
        boolean exists = false;
        for(FootballClub item : LEAGUE_CLUBS){
            if(item.getClubName().equals(sportsClub.getClubName())){
                exists = true;
                System.out.println("\nClub already exists in league");
            }
        }
        // check if sportsClub is an instance of FootballClub
        if(sportsClub instanceof SportsClub && !exists){
            LEAGUE_CLUBS.add((FootballClub) sportsClub); // Explicit type casting
            System.out.println("\nClub added to league.");
            System.out.println(LEAGUE_CLUBS);
        }
    }

    /**
     * method to delete a football club from league
     * @param sportsClubName sports club name as string
     */
    @Override
    public void delete(String sportsClubName) {
        boolean found = false;
        for(FootballClub item : LEAGUE_CLUBS){
            if(item.getClubName().equals(sportsClubName)){
                LEAGUE_CLUBS.remove(item);
                System.out.println("\nDeleted club : " + item);
                System.out.println("\nClub deletion successful.\n");
                System.out.println(LEAGUE_CLUBS);
                found = true;
                break;
            }
        }
        if(!found){
            System.out.println("\nClub not found.");
        }
    }

    /**
     * method to display statistics
     * @param sportsClubName sports club name as string
     */
    @Override
    public void displayStats(String sportsClubName) {
        boolean found = false;
        for(FootballClub item : LEAGUE_CLUBS){
            if(item.getClubName().equals(sportsClubName)){
                System.out.println("\n" + item.toString());
                found = true;
                break;
            }
        }
        if(!found){
            System.out.println("\nClub not found.");
        }
    }

    /**
     * method display premiere league table
     */
    @Override
    public void displayTable() {
        // compare football club objects
        LEAGUE_CLUBS.sort(FootballClub::compareTo);

        // table headers created using string formatting
        System.out.println("\n——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————");
        System.out.printf("%-15s%-15s%-15s%-15s%-15s%-15s%-15s%-15s%-15s%n", "ClubName", "Location", "G-Scored",
                "G-Conceded", "Points", "Matches", "Wins", "Draws", "Defeats");
        System.out.println("——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————");
        System.out.println();

        // table data displayed using string formatting
        for (FootballClub leagueClub : LEAGUE_CLUBS) {
            System.out.printf("%-15s%-15s%-15d%-15d%-15d%-15d%-15d%-15d%-15d%n", leagueClub.getClubName(),
                    leagueClub.getClubCountry(), leagueClub.getNumOfGoalsScored(),
                    leagueClub.getNumOfGoalsConceded(), leagueClub.getNumOfPoints(),
                    leagueClub.getNumOfMatches(), leagueClub.getNumOfWins(),
                    leagueClub.getNumOfDraws(), leagueClub.getNumOfDefeats());
            System.out.println("——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————");
        }
        System.out.println("\n");
    }

    /**
     * Adding a played match to league
     * @param match object
     */
    @Override
    public void addPlayedMatch(Match match) {
            try{
                boolean exists = false;
                boolean homeClubExist = false;
                boolean visitingClubExist = false;

                // check if match exists in league by comparing list items with match object
                if (match instanceof Match){
                    if(LEAGUE_MATCHES.size() >= 1){
                        for(Match item : LEAGUE_MATCHES){
                            if (item.toString().equals(match.toString())){
                                exists = true;
                                System.out.println("\nError: Match already exists in league database.");
                            }
                        }
                    }
                }

                // check if clubs in the match exists in league by comparing home and visiting clubs with league clubs
                if (!exists) {
                    for (FootballClub club : LEAGUE_CLUBS) {
                        if (club.getClubName().equals(match.getHomeClubName())) {
                            homeClubExist = true;
                        } else if (club.getClubName().equals(match.getVisitingClubName())) {
                            visitingClubExist = true;
                        }
                    }
                }

                // if both clubs in exist in league, add match to league and update club statistics
                if (LEAGUE_CLUBS.size() >= 1 && homeClubExist && visitingClubExist){
                    LEAGUE_MATCHES.add(match);
                    System.out.println("\nMatch added to league.");
                    System.out.println(match);
                    System.out.println(LEAGUE_MATCHES);

                    for(FootballClub leagueClub : LEAGUE_CLUBS){
                        if (leagueClub.getClubName().equals(match.getHomeClubName())) {
                            leagueClub.numOfGoalsScored += match.getHomeClubScore();
                            leagueClub.numOfGoalsConceded += match.getVisitingClubScore();
                            leagueClub.numOfMatches += 1;
                            if (match.getHomeClubScore() > match.getVisitingClubScore()){
                                leagueClub.numOfWins += 1;
                                leagueClub.numOfPoints += 3;
                            } else if (match.getHomeClubScore() < match.getVisitingClubScore()){
                                leagueClub.numOfDefeats += 1;
                            } else {
                                leagueClub.numOfDraws += 1;
                                leagueClub.numOfPoints += 1;
                            }
                        } else if ((leagueClub.getClubName().equals(match.getVisitingClubName()))) {
                            leagueClub.numOfGoalsScored += match.getVisitingClubScore();
                            leagueClub.numOfGoalsConceded += match.getHomeClubScore();
                            leagueClub.numOfMatches += 1;
                            if (match.getVisitingClubScore() > match.getHomeClubScore()){
                                leagueClub.numOfWins += 1;
                                leagueClub.numOfPoints += 3;
                            } else if (match.getVisitingClubScore() < match.getHomeClubScore()){
                                leagueClub.numOfDefeats += 1;
                            } else {
                                leagueClub.numOfDraws += 1;
                                leagueClub.numOfPoints += 1;
                            }
                        }
                    }
                } else if((!homeClubExist || !visitingClubExist) && !exists) {
                    System.out.println("\nError: One or Both clubs dont exist in league.");
                } else if(LEAGUE_CLUBS.size() < 1) {
                    System.out.println("\nError: Not enough clubs to add played match");
                }
            } catch (Exception e) {
                System.out.println("\nError: Unable to add played match.");
        }
    }

    /**
     * method to save data structure containing objects to file using FileOutputStream
     * @throws IOException IOException
     */
    @Override
    public void saveToFile() throws IOException {
        try{
            /*
             * Create file object using FileOutputStream
             * Save league club details
             */
            FileOutputStream file1 = new FileOutputStream("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PremiereLeague.txt");
            ObjectOutput objectOutput1 = new ObjectOutputStream(file1); // create object objectOutput from objectOutputStream
            objectOutput1.writeObject(LEAGUE_CLUBS);

            System.out.println("\nLeague details saved to file.");
            objectOutput1.close();
            file1.close();

            /*
             * Create file object using FileOutputStream
             * Save played match details
             */
            FileOutputStream file2 = new FileOutputStream("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PlayedMatchDetails.txt");
            ObjectOutput objectOutput2 = new ObjectOutputStream(file2); // create object objectOutput from objectOutputStream
            objectOutput2.writeObject(LEAGUE_MATCHES);

            System.out.println("\nPlayed match details saved to file.\n");
            objectOutput2.close();
            file2.close();

        } catch (FileNotFoundException Exception){
            new File("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PremiereLeague.txt");
            new File("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PlayedMatchDetails.txt");
            saveToFile();
        }
    }

    /**
     * load objects to data structure from file
     * @throws IOException IOException
     * @throws ClassNotFoundException ClassNotFoundException
     */
    @Override
    @SuppressWarnings("Unchecked")
    public void loadFromFile() throws IOException, ClassNotFoundException {
        try{
            /*
             * Loading played match details from saved file onto program data structure
             */
            ArrayList<Match> tempList2;
            FileInputStream inputStream2 = new FileInputStream("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PlayedMatchDetails.txt");
            ObjectInputStream objectInputStream2 = new ObjectInputStream(inputStream2);

            tempList2 = (ArrayList<Match>) objectInputStream2.readObject(); // type casting

            // check if data structure is empty and load objects from file if it is
            if(LEAGUE_MATCHES.isEmpty() && LEAGUE_CLUBS.isEmpty()){
                LEAGUE_MATCHES.addAll(tempList2);
                System.out.println("\nMatch details loaded from file.\n");
//                System.out.println("----" + LEAGUE_MATCHES.get(0));
                Menu.premiereLeagueManager.setLeagueYear(LEAGUE_MATCHES.get(0).getDate().getYear());
//                if(!LeagueManager.LEAGUE_MATCHES.isEmpty()){
//                    );
//                } else {
//                    premiereLeagueManager.setLeagueYear(Main.plYear);
//                }
            } else {
                System.out.println("\nError : You cannot load previous match details to new league.\n");
            }
            System.out.println(LEAGUE_MATCHES);
            objectInputStream2.close();
            inputStream2.close();

            /*
             * Loading league details from saved file onto program data structure
             */
            ArrayList<FootballClub> tempList1;
            FileInputStream inputStream1 = new FileInputStream("C:\\Users\\Malith\\IdeaProjects\\L5_CW_FXapp\\src\\level5\\cw\\implementation\\PremiereLeague.txt");
            ObjectInputStream objectInputStream1 = new ObjectInputStream(inputStream1);

            tempList1 = (ArrayList<FootballClub>) objectInputStream1.readObject(); // type casting

            // check if data structure is empty and load objects from file if it is
            if(LEAGUE_CLUBS.isEmpty()){
                LEAGUE_CLUBS.addAll(tempList1);
                System.out.println("\nLeague details loaded from file. Previously entered League Year was overridden.\n");
            } else {
                System.out.println("\nError : You cannot load previous league details to new league.\n");
            }
            System.out.println(LEAGUE_CLUBS);
            objectInputStream1.close();
            inputStream1.close();
        }
        catch(FileNotFoundException e) {
            System.out.println("\nFile not found");
        }
        catch(EOFException e){
            System.out.println("\nEnd of stream reached unexpectedly.");
        }
        catch(Exception e){
            System.out.println("\nError while loading file.");
        }
    }

/* ----------------------------------------------------------------------------------------------------------------- */

    /**
     * generate a random played match
     * @return match object with random generated attributes
     */
    public Match generateRandomMatch(){

        Match match = null;
        try{
            Random random =  new Random();

            // create random date
            int randomDay = random.nextInt(31) + 1;
            int randomMonth = random.nextInt(12) + 1;
            int randomYear = random.nextInt((Menu.premiereLeagueManager.getLeagueYear() + 1) -
                    Menu.premiereLeagueManager.getLeagueYear()) + Menu.premiereLeagueManager.getLeagueYear();
            Date randomDate = new Date(randomDay, randomMonth, randomYear);

            // select two random clubs existing in league
            FootballClub randomHomeTeam = LEAGUE_CLUBS.get(random.nextInt(LEAGUE_CLUBS.size()));
            FootballClub randomVisitingTeam = LEAGUE_CLUBS.get(random.nextInt(LEAGUE_CLUBS.size()));

            // generate random scores
            int randomHomeScore = random.nextInt(150)+1;
            int randomVisitingScore = random.nextInt(150)+1;

            // return match object
            match = new Match(randomDate, randomHomeTeam.getClubName(), randomVisitingTeam.getClubName(),
                    randomHomeScore, randomVisitingScore);
        } catch (Exception e){
            System.out.println("Error : Couldn't generate match");
        }
        return match;

//        Match match = null;
//        while (!randomHomeTeam.equals(randomVisitingTeam)){
//            // generate random scores
//            int randomHomeScore = random.nextInt(150)+1;
//            int randomVisitingScore = random.nextInt(150)+1;
//            match = new Match(randomDate, randomHomeTeam.getClubName(), randomVisitingTeam.getClubName(),
//                    randomHomeScore, randomVisitingScore);
//        }
//
//        // return match object
//        return match;

    }

/* ----------------------------------------------------------------------------------------------------------------- */

    /**
     * getter for leagueStartDate
     * @return Date
     */
    public int getLeagueYear() {
        return leagueYear;
    }

    /**
     *
     * @param leagueYear set league year
     */
    public void setLeagueYear(int leagueYear) {
        this.leagueYear = leagueYear;
    }

    /**
     * toString() method for PremiereLeagueManager class
     * @return object attributes as string
     */
    @Override
    public String toString() {
        return "PremiereLeagueManager {" +
                "leagueStartDate = " + getLeagueYear() +
                "leagueClubs = " + LEAGUE_CLUBS +
                "leagueMatches = " + LEAGUE_MATCHES +
                '}';
    }

//    /**
//     * equals() method compares properties of objects
//     * @param obj Object
//     * @return boolean
//     */
//    @Override
//    public boolean equals(int obj) {
//        if (this.getLeagueYear() == int) return true;
//        PremiereLeagueManager that = (PremiereLeagueManager) int;
//        return leagueYear.equals(that.leagueYear);
//    }

//    /**
//     * hashCode() method
//     * @return hashcode of object which is an integer value
//     */
//    @Override
//    public int hashCode() {
//        return Objects.hash(leagueYear, leagueEndDate);
//    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PremiereLeagueManager that = (PremiereLeagueManager) o;
        return leagueYear == that.leagueYear;
    }

    @Override
    public int hashCode() {
        return Objects.hash(leagueYear);
    }
}

